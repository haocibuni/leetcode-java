import java.util.HashMap;

import javax.swing.tree.TreeNode;

class Solution {
	Map<Integer, Integer> map;

	public TreeNode buildTree(int[] preorder, int[] inorder) {
		map = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) { // 用map保存中序序列的数值对应位置
			map.put(inorder[i], i);
		}

		return findNode(preorder, 0, preorder.length, inorder, 0, inorder.length); // 前闭后开
	}

	public TreeNode findNode(int[] preorder, int preBegin, int preEnd, int[] inorder, int inBegin, int inEnd) {
		// 参数里的范围都是前闭后开
		if (preBegin >= preEnd || inBegin >= inEnd) { // 不满足左闭右开，说明没有元素，返回空树
			return null;
		}
		int rootIndex = map.get(preorder[preBegin]); // 找到前序遍历的第一个元素在中序遍历中的位置
		TreeNode root = new TreeNode(inorder[rootIndex]); // 构造结点
		int lenOfLeft = rootIndex - inBegin; // 保存中序左子树个数，用来确定前序数列的个数
		root.left = findNode(preorder, preBegin + 1, preBegin + lenOfLeft + 1, inorder, inBegin, rootIndex);
		root.right = findNode(preorder, preBegin + lenOfLeft + 1, preEnd, inorder, rootIndex + 1, inEnd);

		return root;
	}
}