执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户
内存消耗：8.8 MB, 在所有 C++ 提交中击败了51.88% 的用户
通过测试用例：59 / 59

### 解题思路

nums1 尾部的 n 个 0 是预留空间，可以直接使用，不需要额外空间。
p1/p2 分别从 `nums1[m-1]`/`nums2[n-1]` 开始往前移动，较大值在 `nums2[p2]` 则直接 copy 到 `nums1[p]`；较大值在 `nums1[p1]`则需要交换`nums1[p1]`和`nums1[p]`

### 代码

* cpp

```cpp
class Solution {
public:
  void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
    int p1 = m - 1;
    int p2 = n - 1;
    int p  = m + n - 1;

    for (; p >= 0 && p2 >= 0; --p) {
      if (p1 >= 0 && nums1[p1] > nums2[p2]) {
        std::swap(nums1[p], nums1[p1--]);
        //nums1[p] = nums1[p1];
        //nums1[p1--] = 0;
      } else {
        nums1[p] = nums2[p2--];
      }
    }
  }
};
```

