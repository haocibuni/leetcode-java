> Problem: [剑指 Offer 10- I. 斐波那契数列](https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/description/)

[TOC]

# 思路：动态规划

如果使用递归求解，会重复计算一些子问题。
- 例如，计算 `f(4)` 需要计算 `f(3)` 和 `f(2)`，计算 `f(3)` 需要计算 `f(2)` 和 `f(1)`，可以看到 `f(2)` 被重复计算了。

![image.png](https://pic.leetcode.cn/1692620465-MEdHOO-image.png)

- 递归是将一个问题划分成多个子问题求解，动态规划也是如此，
- 但是 **动态规划会把子问题的解缓存起来**，从而 **避免重复求解子问题**。

**优化**：

- 考虑到第 `i` 项只与第 `i-1` 和第 `i-2` 项有关，因此只需要存储前两项的值就能求解第 `i` 项，从而将空间复杂度由 `O(n)` 降低为 `O(1)`。

# Code

* []

```C++
class Solution {
public:
    int fib(int n) {
        if(n <= 1) return n;
        vector<int> fib(n + 1);
        fib[1] = 1;
        for(int i = 2; i <= n; i++){
            fib[i] = (fib[i - 1] + fib[i - 2]) % 1000000007;
        }
        return fib[n] ;
    }
};
```

* []

```Java
class Solution {
    public int fib(int n) {
        if(n <= 1) return n;
        int[] fib = new int[n + 1];
        fib[1] = 1;
        for(int i = 2; i <= n; i++){
            fib[i] = (fib[i - 1] + fib[i - 2]) % 1000000007;
        }
        return fib[n] ;
    }
}
```

**优化**：

* []

```C++
class Solution {
public:
    int fib(int n) {
        if(n <= 1) return n;
        int pre1 = 0, pre2 = 1, tmp = 0;
        for(int i = 2; i <= n; i++){
            tmp = (pre1 + pre2) % 1000000007;
            pre1 = pre2;
            pre2 = tmp;
        }
        return tmp;
    }
};
```

* []

```Java
class Solution {
    public int fib(int n) {
        if(n <= 1) return n;
        int pre1 = 0, pre2 = 1, tmp = 0;
        for(int i = 2; i <= n; i++){
            tmp = (pre1 + pre2) % 1000000007;
            pre1 = pre2;
            pre2 = tmp;
        }
        return tmp;
    }
}
```

# 复杂度分析：

- **时间复杂度**：$O(n)$。
- **空间复杂度**：$O(1)$。

> **放弃一件事很容易，每天能坚持一件事一定很酷，一起每日一题吧！**

**关注我[LeetCode主页](https://leetcode.cn/u/shen-du-rm/) /  [CSDN—力扣专栏](http://t.csdn.cn/kQLJO)，每日更新！**

注： 如有不足，欢迎指正！
